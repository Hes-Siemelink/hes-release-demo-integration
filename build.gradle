// Import task types
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id "com.bmuschko.docker-remote-api" version "8.1.0"
  id "java"
  id "base"
}

targetCompatibility = JavaVersion.VERSION_11

project.version = '1.0.0'

ext{
    registry= [
        url : 'xlr-registry:5050',
        org : 'digitalai'
    ]
}

processResources {
  filesMatching(['**/synthetic.xml', '**/plugin-version.properties']) {
    filter(ReplaceTokens, tokens: [
        'project.version': project.version,
        'project.name'   : project.name,
        'registry.url'   : registry.url,
        'registry.org'   : registry.org
    ])
  }
}

task copyDockerFiles(type: Copy) {
  from "Dockerfile"
  from ".dockerignore"
  into "${project.buildDir}/docker/"
}

task copyAppFiles(type: Copy) {
  from "requirements.txt"
  from "src/main/python"
  into "${project.buildDir}/docker/app"
}


def buildPluginImage = tasks.register("k3dBuildPluginImage", DockerBuildImage) {
    dependsOn(copyDockerFiles, copyAppFiles)
    labels.put('product', 'release')
    labels.put('pluginVersion', project.version)
    labels.put('pluginName', project.name)
    images.add("${registry.org}/${project.name}:${project.version}")
}

def tagImage = tasks.register("k3dTagImageForRegistry", DockerTagImage) {
  dependsOn(buildPluginImage)
  targetImageId buildPluginImage.get().getImageId()
  repository = "${registry.url}/${registry.org}/${project.name}"
  tag = "${project.version}"
}

def pushImageToRegistry = tasks.register("k3dPushImageToRegistry", DockerPushImage) {
  dependsOn(tagImage)
  images = ["${registry.url}/${registry.org}/${project.name}:${project.version}"]
}

def cleanBaseImage = tasks.register("k3dCleanBaseImageFromLocalDocker", DockerRemoveImage) {
  imageId = "${registry.org}/${project.name}:${project.version}"
}

def cleanImage = tasks.register("k3dCleanImageFromLocalDocker", DockerRemoveImage) {
  imageId = "${registry.url}/${registry.org}/${project.name}:${project.version}"
}

def publishTask = tasks.register("k3dPublishImageToRegistry") {
  dependsOn([pushImageToRegistry, cleanImage, cleanBaseImage])
}

pushImageToRegistry.get().finalizedBy(
    cleanBaseImage, cleanImage
)

build.dependsOn 'k3dPushImageToRegistry'
